   ------
 Introduction
 ------
 Edwin Punzalan
 ------
 2013-07-22
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

${project.name}

* About this Fork

  This is a fork of the original {{{https://maven.apache.org/plugins/maven-eclipse-plugin/}Maven Eclipse Plugin}} which {{{http://mail-archives.apache.org/mod_mbox/maven-dev/201510.mbox/%3Cop.x55dxii1kdkhrr%40robertscholte.dynamic.ziggo.nl%3E}was retired end of 2015}} in favor of the m2e Eclipse integration.

  In our wcm.io and other Maven-based projects we usually use both m2e Integration and the Eclipse Maven Plugin. The Eclipse Maven Plugin is used to generate project-specific eclipse settings files and further files for Checkstyle, Findbugs and PMD based on a global build tools artifact defined a parent POM like `io.wcm.maven:io.wcm.maven.global-parent`, see {{{http://wcm.io/tooling/maven/global-parent.html}Global Parent}} documentation for details.

  So we maintain a fork of the original plugin here and publish it under Apache 2.0 license within the wcm.io DevOps project.

  {{{./changes-report.html}Changes since the original Maven Eclipse Plugin 2.10.}}


* Plugin Overview

  The Maven Eclipse Plugin is used to generate Eclipse IDE files (*.classpath,
  *.project, *.wtpmodules and the .settings folder) for use with a project.

  <<Disclaimer:>> Users are advised to use m2e, the {{{https://projects.eclipse.org/projects/technology.m2e}Eclipse Maven Integration}}
  instead of this plugin, as it can more closely resemble the actual build and runtime classpaths as described in the
  project pom.xml - among other advantages. However, there are project setups and workflows that still work more
  efficiently with statically generated Eclipse metadata - for example when there is a large number of projects in
  a reactor. That's where the Maven Eclipse Plugin can still help you.

* Goals Overview

  The Maven Eclipse Plugin has several goals.

** Standard eclipse goals

  * {{{./configure-workspace-mojo.html}eclipse:configure-workspace}} is used to add the
  classpath variable M2_REPO to Eclipse which points to your local repository and
  optional to configure other workspace features.

  * {{{./eclipse-mojo.html}eclipse:eclipse}} generates the Eclipse configuration
  files.

  * {{{./resolve-workspace-dependencies-mojo.html}eclipse:resolve-workspace-dependencies}} is used to download
  all missing M2_REPO classpath variable elements for all projects in a workspace. Used if the Eclipse project
  configuration files are committed to version control and other users need to resolve new artifacts after an
  update.

  * {{{./clean-mojo.html}eclipse:clean}} is used to delete the files used by the
  Eclipse IDE.

** Specific goals

*** Specific goals for PDE developments

  * {{{./to-maven-mojo.html}eclipse:to-maven}} Add Eclipse artifacts an Eclipse installation or a
  local P2 repo to the local Maven repo. This mojo automatically analyzes the local P2 repo, copies
  jars from the plugins directory to the local maven repo, and generates appropriate poms.

  * {{{./install-plugins-mojo.html}eclipse:install-plugins}} installs all resolved project
  dependencies of a particular type (usually 'eclipse-plugin') into the specified Eclipse
  installation directory.

  * {{{./make-artifacts-mojo.html}eclipse:make-artifacts}} copies all Eclipse plugins from an
  installation directory to the local repository, generating POMs for each.

*** Specific goals to support myeclipse

  * {{{./myeclipse-mojo.html}eclipse:myeclipse}} Generates the MyEclipse configuration files.

  * {{{./myeclipse-clean-mojo.html}eclipse:myeclipse-clean}} Deletes the config files used by MyEclipse.

*** Specific goals to support RAD v6

  * {{{./rad-mojo.html}eclipse:rad}} Generates the Rad-6 configuration files.

  * {{{./rad-clean-mojo.html}eclipse:rad-clean}} Deletes the config files used by Rad-6.

* Usage

  General instructions on how to use the Eclipse Plugin can be found on the {{{./usage.html}usage page}}. Some more
  specific use cases are described in the examples given below. Last but not least, users occasionally contribute
  additional examples, tips or errata to the
  {{{http://docs.codehaus.org/display/MAVENUSER/Eclipse+Plugin}plugin's wiki page}}.

  In case you still have questions regarding the plugin's usage, please have a look at the {{{./faq.html}FAQ}} and feel
  free to contact the {{{./mail-lists.html}user mailing list}}. The posts to the mailing list are archived and could
  already contain the answer to your question as part of an older thread. Hence, it is also worth browsing/searching
  the {{{./mail-lists.html}mail archive}}.

  If you feel like the plugin is missing a feature or has a defect, you can fill a feature request or bug report in our
  {{{./issue-tracking.html}issue tracker}}. When creating a new issue, please provide a comprehensive description of your
  concern. Especially for fixing bugs it is crucial that the developers can reproduce your problem. For this reason,
  entire debug logs, POMs or most preferably little demo projects attached to the issue are very much appreciated.
  Of course, patches are welcome, too. Contributors can check out the project from our
  {{{./source-repository.html}source repository}} and will find supplementary information in the
  {{{http://maven.apache.org/guides/development/guide-helping.html}guide to helping with Maven}}.

* Examples

  To provide you with better understanding on some usages of the Eclipse Plugin,
  you can take a look into the following examples:

  * {{{./examples/prevent-module-references.html}Prevent Module References}}

  * {{{./examples/attach-library-sources.html}Attach Library Sources}}

  * {{{./examples/provide-project-natures-and-build-commands.html}Provide Project Natures and Build Commands}}

  * {{{./examples/additional-facets.html}Adding additional facets}}

  * {{{./examples/load-code-styles.html}Load Code Style file}}

  * {{{./examples/configure-checkstyle.html}Configure Checkstyle}}

  * {{{./examples/multi-module-projects.html}Multi-module projects with WTP}}

  * {{{./examples/ajdt-projects.html}AJDT projects}}

  * {{{./examples/specifying-source-path-inclusions-and-exclusions.html}Specifying source path inclusions and exclusions}}

  []

* Trouble Shooting

  See {{{./trouble-shooting/index.html}Trouble Shooting}} for more details.
